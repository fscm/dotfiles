#!/bin/bash
#
# Shell script to boostrap some profile 'dotfiles'.
#
# Copyright 2019-2021, Frederico Martins
#   Author: Frederico Martins <http://github.com/fscm>
#
# SPDX-License-Identifier: MIT
#
# This program is free software. You can use it and/or modify it under the
# terms of the MIT License.
#

set -e

BASENAME=$(basename "${0}")
__TS__=$(date +%Y%m%d%H%M%S)


# Variables
BACKUP_ALL=0
REPLACE_ALL=0
SKIP_ALL=0

DOTFILES_DIR="./files"
PROFILE_DIR="${HOME}"


# Usage
show_usage() {
  echo "Usage: ${BASENAME} [options]"
  echo "  -b    Backup existing files."
  echo "  -h    Show help."
  echo "  -r    Replace existing files."
  echo "  -s    Skip existing files."
  echo
}


# Options parsing
while getopts ":bhos" opt; do
  case ${opt} in
    b)
      BACKUP_ALL=1
      ;;
    h)
      show_usage
      exit 0
      ;;
    o)
      REPLACE_ALL=1
      ;;
    s)
      SKIP_ALL=1
      ;;
    \?)
      echo >&2 "  [ERROR] Invalid option: -${OPTARG}"
      exit 1
      ;;
    :)
      echo >&2 "  [ERROR] Option -${OPTARG} requires an argument"
      exit 2
      ;;
  esac
done


# Check requirements
if [ "$((BACKUP_ALL+OVERRIDE_ALL+SKIP_ALL))" -gt 1 ]; then
  echo >&2 "  [ERROR] Backup (-b), Replace (-r) and Skip (-s) options can not be used together."
  exit 3
fi


# Install file
install_file() {
  local src="${1}"
  local dst="${2}"
  printf "  [INFO ] Installing file '${dst}'... "
  if [[ -e "${dst}" ]]; then
    if [[ "${SKIP_ALL}" -gt 0 ]]; then
      echo 'skiped'
    elif diff -q "${src}" "${dst}" > /dev/null 2>&1; then
      echo 'ignored'
    elif [[ "${BACKUP_ALL}" -gt 0 ]]; then
      mv "${dst}" "${dst}.${__TS__}.bck"
      cp -f "${src}" "${dst}"
      echo 'backuped'
    elif [[ "${REPLACE_ALL}" -gt 0 ]]; then
      cp -f "${src}" "${dst}"
      echo 'replaced'
    else # ask
      local action
      echo "exists"
      printf '          [b]ackup, [B]ackup all, [r]eplace, [R]eplace all, [s]kip, [S]kip all: (b/B/r/R/s/S [s]) '
      read action
      case "$action" in
        b|B)
          [[ "${action}" == "B" ]] && BACKUP_ALL=1
          if diff -q "${src}" "${dst}" > /dev/null 2>&1; then
            echo '          file ignored'
          else
            mv "${dst}" "${dst}.${__TS__}.bck"
            cp -f "${src}" "${dst}"
            echo '          file backuped'
          fi
          ;;
        r|R)
          [[ "${action}" == "R" ]] && REPLACE_ALL=1
          cp -f "${src}" "${dst}"
          echo '          file replaced'
          ;;
        s|S)
          [[ "${action}" == "S" ]] && SKIP_ALL=1
          echo '          file skiped'
          ;;
        *)
          echo '          file skiped'
          ;;
      esac
    fi
  else # file do not exist
    local dst_dir="$(dirname ${dst})"
    if [[ ! -e "${dst_dir}" ]]; then
      mkdir -p "${dst_dir}"
    fi
    cp -f "${src}" "${dst}"
    echo 'installed'
  fi
}


# main
(
  BOOTSTRAP="${BASH_SOURCE[0]:-$0}"
  if [ -L "${BOOTSTRAP}" ]; then
    BOOTSTRAP="$(readlink -n "${BOOTSTRAP}")"
  fi

  cd "$(dirname "${BOOTSTRAP}")"

  if [[ ! -d "${DOTFILES_DIR}" ]]; then
    echo >&2 "  [ERROR] '${DOTFILES_DIR}' not found."
    exit 4
  fi

  for file in $(cd "${DOTFILES_DIR}"; find "." -type f | sed 's|^./||'); do
    install_file "${DOTFILES_DIR}/${file}" "${PROFILE_DIR}/${file}"
  done

  printf "  [INFO] Changing default shell to '/bin/bash'... "
  chsh -s /bin/bash
  echo 'changed'
)

echo "  [INFO] All done!"

exit 0
